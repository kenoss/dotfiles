" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'freeo/vim-kalisi'
NeoBundle 'powerline/powerline'
NeoBundle 'tsukkee/lingr-vim'
NeoBundle 'bling/vim-airline'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'tyru/caw.vim'
NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make -f make_mac.mak',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }
NeoBundle 'Shougo/unite.vim'
NeoBundleLazy 'supermomonga/jazzradio.vim', { 'depends' : [ 'Shougo/unite.vim' ] }

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck



let g:quickrun_config = {
\   "_" : {
\       "outputter/buffer/split" : ":botright",
\       "outputter/buffer/close_on_empty" : 1
\   },
\}

nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"


if neobundle#tap('jazzradio.vim')
  call neobundle#config({
        \   'autoload' : {
        \     'unite_sources' : [
        \       'jazzradio'
        \     ],
        \     'commands' : [
        \       'JazzradioUpdateChannels',
        \       'JazzradioStop',
        \       {
        \         'name' : 'JazzradioPlay',
        \         'complete' : 'customlist,jazzradio#channel_id_complete'
        \       }
        \     ],
        \     'function_prefix' : 'jazzradio'
        \   }
        \ })
endif




" autoindent
autocmd FileType perl set autoindent|set smartindent
autocmd FileType perl set tabstop=4|set shiftwidth=4|set expandtab|set softtabstop=4
autocmd FileType perl set showmatch
autocmd FileType perl set number
"
" " check perl code with :make
" autocmd FileType perl set makeprg=perl\ -c\ %\ $*
" autocmd FileType perl set errorformat=%f:%l:%m
" autocmd FileType perl set autowrite




" lingr.vim {{{2
if !exists('g:lingr') " && !g:V.is_windows()
  " Only when started by the 'lingr' command(alias), lingr.vim is used.
  " alias lingr="vim --cmd 'let g:lingr = 1' -c LingrLaunch"
  let g:loaded_lingr_vim = 1
endif
let g:lingr_vim_user = 'kenoss'
 
"  let g:lingr_vim_additional_rooms = [
"  \ 'vim',
"  \ 'gentoo',
"  \ 'vimjolts',
"  \ 'editor',
"  \ 'vimperator',
"  \ 'bazaar',
"  \ 'filer',
"  \ 'git',
"  \ 'completion',
"  \ 'java_ja',
"  \ 'shell',
"  \ 'scala',
"  \ 'lingr',
"  \ 'lowlevel',
"  \ 'haskell',
"  \ 'ruby',
"  \ '_',
"  \ 'thinca',
"  \ 'onsg',
"  \ 'yokohamavim',
"  \ ]
"


syntax on
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,euc-jp,default,latin1

set number
set hlsearch
set incsearch
set cursorline
set paste


colorscheme jellybeans
"colorscheme kalisi


"""" key bindings
nnoremap ; :
nnoremap : ;

""" emacs compatible keymap
"noremap <C-g> <Esc>
inoremap <C-g> <Esc>
cnoremap <C-g> <C-c>

noremap! <C-n> <Down>
noremap! <C-p> <Up>
noremap! <C-f> <Right>
noremap! <C-b> <Left>
noremap! <C-a> <Home>
noremap! <C-e> <End>
noremap! <C-d> <Del>
noremap! <C-k> <ESC>ld$a
noremap! <C-y> <ESC>pa

noremap <C-f> <Right>
noremap <C-b> <Left>

nnoremap J <C-d>
nnoremap K <C-u>

""""
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>

"" temporary
noremap <Space>h  ^
noremap <Space>l  $
nnoremap <Space>/  *
noremap <Space>m  %

" Window
nnoremap s <Nop>
"nnoremap sj <C-w>j
"nnoremap sk <C-w>k
"nnoremap sl <C-w>l
"nnoremap sh <C-w>h
"nnoremap sJ <C-w>J
"nnoremap sK <C-w>K
"nnoremap sL <C-w>L
"nnoremap sH <C-w>H
nnoremap sr <C-w>r
nnoremap s= <C-w>=
nnoremap ss <C-w>w
nnoremap sS <C-w>W
nnoremap st <C-w>w
nnoremap sh <C-w>W
nnoremap sn gt
nnoremap sd gT
nnoremap so <C-w>_<C-w>|
nnoremap sO <C-w>=
nnoremap sN :<C-u>bn<CR>
nnoremap sP :<C-u>bp<CR>
nnoremap sc :<C-u>tabnew<CR>
nnoremap sC :<C-u>Unite tab<CR>
nnoremap s' :<C-u>split<CR>
nnoremap s" :<C-u>vsplit<CR>
nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>qa<CR>
nnoremap sb :<C-u>Unite buffer_tab -buffer-name=file<CR>
nnoremap sB :<C-u>Unite buffer -buffer-name=file<CR>

nnoremap <C-x><C-k> :QuickRun<CR>

" syntax check for perl
autocmd filetype perl :map <silent><C-c> :cn<CR>
autocmd filetype perl :map <silent><C-l> :cl<CR>
autocmd filetype perl :nnoremap <buffer> <silent> <C-x><C-x> :w<CR>:!perl -c -MVi::QuickFix % <CR>
autocmd filetype perl :nnoremap <buffer> <silent> <C-x><C-e> :cf <CR>

"nmap <C-K> <Plug>(caw:i:toggle)
vmap ; <Plug>(caw:i:toggle)


if &diff " only for diff mode/vimdiff
  noremap J ]c
  noremap K [c
  set foldlevel=1
endif

